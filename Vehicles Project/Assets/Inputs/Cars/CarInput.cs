//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Cars/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""152464ba-9a21-4379-9c55-0b7c8ab2466e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7144dd5d-17ea-43b7-a4a4-e197a56f8e00"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BreakPressed"",
                    ""type"": ""Button"",
                    ""id"": ""9734d77d-b1a5-496d-aab8-27d7af3ff96e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BreakReleased"",
                    ""type"": ""Button"",
                    ""id"": ""1136b822-4848-4119-8a64-717c6d338231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""06e72553-4a02-45a5-9035-2748af03822f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d2111de0-d6c1-477f-ac65-7fc724d67ef0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0cd29e8a-e699-4aab-aa6c-4dcbc046f509"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""92cf119c-439a-4145-9f39-e4e60153dedc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7be88024-b326-44a0-a64a-f0a3166cb16b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1b5dbcd-f2db-4a28-9aed-c4cbac2ff67c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BreakPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c87d840f-1a1f-4cf1-9c9f-4b8e0e219160"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BreakReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Movement = m_Car.FindAction("Movement", throwIfNotFound: true);
        m_Car_BreakPressed = m_Car.FindAction("BreakPressed", throwIfNotFound: true);
        m_Car_BreakReleased = m_Car.FindAction("BreakReleased", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_Car_Movement;
    private readonly InputAction m_Car_BreakPressed;
    private readonly InputAction m_Car_BreakReleased;
    public struct CarActions
    {
        private @CarInput m_Wrapper;
        public CarActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Car_Movement;
        public InputAction @BreakPressed => m_Wrapper.m_Car_BreakPressed;
        public InputAction @BreakReleased => m_Wrapper.m_Car_BreakReleased;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CarActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnMovement;
                @BreakPressed.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakPressed;
                @BreakPressed.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakPressed;
                @BreakPressed.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakPressed;
                @BreakReleased.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakReleased;
                @BreakReleased.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakReleased;
                @BreakReleased.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBreakReleased;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @BreakPressed.started += instance.OnBreakPressed;
                @BreakPressed.performed += instance.OnBreakPressed;
                @BreakPressed.canceled += instance.OnBreakPressed;
                @BreakReleased.started += instance.OnBreakReleased;
                @BreakReleased.performed += instance.OnBreakReleased;
                @BreakReleased.canceled += instance.OnBreakReleased;
            }
        }
    }
    public CarActions @Car => new CarActions(this);
    public interface ICarActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBreakPressed(InputAction.CallbackContext context);
        void OnBreakReleased(InputAction.CallbackContext context);
    }
}
